import flag
from countries import *

def format_text(text):
    #text.replace("*", "\\*").replace("_", "\\_").replace("{", "\{").replace("}", "\}").replace("[", "\\[").replace("]", "\]").replace("(", "\(").replace(")", "\)").replace("#", "\#").replace("+", "\+").replace("-", "\-").replace(".", "\.").replace("!", "\!").replace(".", "\.")
    formated_text = text.replace(".", "\.").replace("-", "\-").replace("*", "\\*").replace("_", "\\_").replace("{", "\{").replace("}", "\}").replace("[", "\\[").replace("]", "\]").replace("(", "\(").replace(")", "\)").replace("#", "\#").replace("+", "\+").replace("!", "\!")
    return formated_text

def get_country(barcode, barcode_type):
    if barcode_type == "EAN13" and int(str(barcode)[0]) != 0:
        country_barcode = int(str(barcode)[:3])
        country_code = barcode_country(country_barcode)
        return country_code
    elif barcode_type == "EAN13" and int(str(barcode)[0]) == 0:
        country_code = ["US", "CA"]
        return country_code
    elif barcode_type == "EAN8":
        country_barcode = int(str(barcode)[:3])
        country_code = barcode_country(country_barcode)
        return country_code
    else:
        return ""
def get_from_list(counts, barcode, barcode_type, lang):
    if lang == "ru":
        text = ""

        for i in range(0, len(counts)):
            country_code = counts[i]
            country_name = get_country_name(country_code, lang)
            country_flag = flag.flag(country_code)
            
            if i == len(counts) - 1:
                text = text + country_name + " " + country_flag + "." 
            else:
                text = text + country_name + " " + country_flag + ",\n"

        result_text = f"""\u2757_–≠—Ç–æ—Ç —à—Ç—Ä–∏—Ö –∫–æ–¥ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω\._
    
*‚ôªÔ∏è –°–¥–µ–ª–∞–Ω–æ –≤*: {format_text(text)}

‚ÑπÔ∏è
‚îú *–ü–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å*: _{validity_check(barcode, barcode_type, lang)}_
‚îú *–®—Ç—Ä–∏—Ö\-–∫–æ–¥:* _{format_text(barcode)}_
‚îú *–¢–∏–ø —à—Ç—Ä–∏—Ö –∫–æ–¥–∞*: _{barcode_type}_
‚îú *–ö–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è*: _{get_company_code(barcode, barcode_type)}_
‚îî *–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞*: _{get_product_code(barcode, barcode_type, lang)}_"""
        return result_text
    
    elif lang == "eng":
        text = ""

        for i in range(0, len(counts)):
            country_code = counts[i]
            country_name = get_country_name(country_code, lang)
            country_flag = flag.flag(country_code)
            
            if i == len(counts) - 1:
                text = text + country_name + " " + country_flag + "\." 
            else:
                text = text + country_name + " " + country_flag + ",\n"

        result_text = f"""\u2757_This barcode may belong to multiple countries\._

*‚ôªÔ∏è Made in*: {text}

‚ÑπÔ∏è
‚îú *Authenticity*: {validity_check(barcode, barcode_type, lang)}
‚îú *Barcode*: {format_text(barcode)}
‚îú *Barcode Type*: {barcode_type}
‚îú *Manufacturer Code*: {get_company_code(barcode, barcode_type)}
‚îî *Product Code*: {get_product_code(barcode, barcode_type, lang)}"""
        return result_text

def country_not_detected(barcode, barcode_type, lang):
    if lang == "ru":
        text = f"""*‚ôªÔ∏è –°–¥–µ–ª–∞–Ω–æ –≤*: –û—Ç—Å—É—Å—Ç–≤—É–µ—Ç üö´

‚ÑπÔ∏è
‚îú *–ü–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å*: _{validity_check(barcode, barcode_type, lang)}_
‚îú *–®—Ç—Ä–∏—Ö\-–∫–æ–¥:* _{format_text(barcode)}_
‚îú *–¢–∏–ø —à—Ç—Ä–∏—Ö –∫–æ–¥–∞*: _{barcode_type}_
‚îú *–ö–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è*: _{get_company_code(barcode, barcode_type)}_
‚îî *–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞*: _{get_product_code(barcode, barcode_type, lang)}_"""
        return text
    
    elif lang == "eng":
        text = f"""*‚ôªÔ∏è Made in*\: Absent üö´

‚ÑπÔ∏è
‚îú *Authenticity*: _{validity_check(barcode, barcode_type, lang)}_
‚îú *Barcode*: _{format_text(barcode)}_
‚îú *Barcode Type*: _{barcode_type}_
‚îú *Manufacturer Code*: _{get_company_code(barcode, barcode_type)}_
‚îî *Product Code*: _{get_product_code(barcode, barcode_type, lang)}_""" 
        return text

def result_msg(barcode, country, barcode_type, lang):
    if lang == "ru":
        text = f"""*‚ôªÔ∏è –°–¥–µ–ª–∞–Ω–æ –≤:* {country}

‚ÑπÔ∏è
‚îú *–ü–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å*: _{validity_check(barcode, barcode_type, lang)}_
‚îú *–®—Ç—Ä–∏—Ö\-–∫–æ–¥:* _{format_text(barcode)}_
‚îú *–¢–∏–ø —à—Ç—Ä–∏—Ö –∫–æ–¥–∞*: _{barcode_type}_
‚îú *–ö–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—è*: _{get_company_code(barcode, barcode_type)}_
‚îî *–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞*: _{get_product_code(barcode, barcode_type, lang)}_"""
        return text
    
    elif lang == "eng":
        text = f"""*‚ôªÔ∏è Made in:* {country}

‚ÑπÔ∏è
‚îú *Authenticity*: _{validity_check(barcode, barcode_type, lang)}_
‚îú *Barcode*: _{format_text(barcode)}_
‚îú *Barcode Type*: _{barcode_type}_
‚îú *Manufacturer Code*: _{get_company_code(barcode, barcode_type)}_
‚îî *Product Code*: _{get_product_code(barcode, barcode_type, lang)}_""" 
        return text

def validity_check(code, barcode_type, lang):
    if barcode_type == "EAN13":
        contr = -1
        str_code = str(code)
        
        sum_z = 0
        sum_k = 0
        
        for i in range(0, len(str(code))):

            if (i + 1) % 2 == 0:
                sum_z = sum_z + int(str_code[i])

        for i in range(0, len(str(code)) - 1):
            if (i + 1) % 2 != 0:
                sum_k = sum_k + int(str_code[i])

        print((sum_z * 3) + sum_k)

        if ((sum_z * 3) + sum_k) % 10 == 0:
            contr = 0
        else:   
            contr = 10 - int(''.join(str((sum_z * 3) + sum_k)[-1]))
        
        if contr == int(str_code[-1]):
            if lang == "ru":
                return "–ö–æ–¥ –≤–µ—Ä–Ω—ã–π ‚úÖ"
            elif lang == "eng":
                return "The code is correct ‚úÖ"
        else:
            if lang == "ru":
                return "–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå"
            elif lang == "eng":
                return "The code is incorrect ‚ùå"

    
    elif barcode_type == "EAN8":
        str_code = str(code)

        sum_z = 0
        sum_k = 0

        for i in range(0, len(str(code)) - 1):

            if (i + 1) % 2 == 0:
                sum_z = sum_z + int(str_code[i])

        for i in range(0, len(str(code))):
            if (i + 1) % 2 != 0:
                sum_k = sum_k + int(str_code[i])

        contr = int((str((sum_k * 3) + sum_z)))
        tasnyak = str(int(str(contr)[0]) + 1) + "0"

        result = int(tasnyak) - contr

        if result == int(str_code[-1]):
            if lang == "ru":
                return "–ö–æ–¥ –≤–µ—Ä–Ω—ã–π ‚úÖ"
            elif lang == "eng":
                return "The code is correct ‚úÖ"
        else:
            if lang == "ru":
                return "–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå"
            elif lang == "eng":
                return "The code is incorrect ‚ùå"
    else:
        if lang == "ru":
            return "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω ‚ö†Ô∏è"
        elif lang == "eng":
            return "Not verified ‚ö†Ô∏è"

def get_company_code(code, barcode_type):
    if barcode_type == "EAN13" and int(str(code)[0]) != 0:
        company_code = str(code[3:7])
        return company_code
    elif barcode_type == "EAN13" and int(str(code)[0]) == 0:
        company_code = str(code)[2:7]
        return company_code
    elif barcode_type == "EAN8":
        company_code = str(code[3:7])
        return company_code

def get_product_code(code, barcode_type, lang):
    if barcode_type == "EAN13" and int(str(code)[0]) != 0:
        product_code = str(code[7:12])
    elif barcode_type == "EAN13" and int(str(code)[0]) == 0:
        product_code = str(code[7:12])
    else:
        if lang == "ru":
            product_code = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç üö´"
        elif lang == "eng":
            product_code = "Absent üö´"
    return product_code



info_ru = """‚ùì *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–æ—Ç—å—Å—è –±–æ—Ç–æ–º*:

–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –µ–µ\. –ö–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–æ—Ä—á–∏–≤ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–º –∏ –Ω–µ –ø–ª–æ—Ö–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –º–æ–≥—É –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—ã\:

_\- 1D –ø—Ä–æ–¥—É–∫—Ç\: UPC\-A, UPC\-E, EAN\-8, EAN\-13_
_\- 2D: QR Code_

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ\:* _–ë–æ—Ç –º–æ–∂–µ—Ç –∏–Ω–æ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å –∫–æ–º–ø–∞–Ω–∏–∏\._"""

info_eng = """‚ùì *How to use the bot*:

Send me a photo and I will do my best to decipher it\.  The code in the image should be legible and centered, not vague or too small or of poor quality\.  Also, I can only decode these formats\:

 _\-1D product\: UPC\-A, UPC\-E, EAN\-8, EAN\-13_
 _\- 2D: QR Code_

*Note\: * _Bot may sometimes indicate the country in which the company's headquarters are located\._"""